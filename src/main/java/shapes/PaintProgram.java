/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package shapes;

//import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JColorChooser;
//import javax.swing.JDialog;
//import javax.swing.JFrame;
import javax.swing.JOptionPane;
//import javax.swing.JPanel;

/**
 *
 * @author yasmi
 */
public class PaintProgram extends javax.swing.JFrame {
   // private HashMap<String,Shape> shapes = new HashMap<>();
    /**
     * Creates new form PaintProgram
     */
    public PaintProgram() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        canvas1 = new java.awt.Canvas();
        squareButton = new javax.swing.JToggleButton();
        rectangleButton = new javax.swing.JToggleButton();
        shapesBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        colorize = new javax.swing.JButton();
        lineButton = new javax.swing.JToggleButton();
        delete = new javax.swing.JButton();
        circleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        canvas1.setBackground(new java.awt.Color(255, 255, 255));
        canvas1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        buttonGroup1.add(squareButton);
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(rectangleButton);
        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        shapesBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose shape" }));
        shapesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapesBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Select shape");

        colorize.setText("Colorize");
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        buttonGroup1.add(lineButton);
        lineButton.setText("Line");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        buttonGroup1.add(circleButton);
        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shapesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorize, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shapesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorize)
                    .addComponent(delete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineButton)
                    .addComponent(circleButton)
                    .addComponent(squareButton)
                    .addComponent(rectangleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        // TODO add your handling code here:
//        Square square1 =new Square();
//        Square.counter++;
//        HashMap<String , Double> properties = new HashMap<>();
//         String squareLength = JOptionPane.showInputDialog("Enter length :");
//         String squareXY =JOptionPane.showInputDialog("Enter position (x,y) :");
//         String[] values = squareXY.split(",");
//            int x = Integer.parseInt(values[0]);
//            int y = Integer.parseInt(values[1]);
//        Point p = new Point(x, y);
//        square1.setPosition(p);
//        properties.put("Length", Double.valueOf(squareLength));
//        square1.setProperties(properties);
//        addShape(square1);
//       square1.draw(canvas1.getGraphics());
    }//GEN-LAST:event_squareButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        // TODO add your handling code here:
//        Rectangle rect1 = new Rectangle();
//        Rectangle.counter++;
//        HashMap<String , Double> properties = new HashMap<>();
//        String rectLength = JOptionPane.showInputDialog("Enter width :");
//        String rectHeight = JOptionPane.showInputDialog("Enter height :");
//        String rectXY =JOptionPane.showInputDialog("Enter position (x,y) :");
//        String[] values = rectXY.split(",");
//            int x = Integer.parseInt(values[0]);
//            int y = Integer.parseInt(values[1]);
//        Point p = new Point(x, y);
//        rect1.setPosition(p);
//        properties.put("Width", Double.valueOf(rectLength));
//        properties.put("Height", Double.valueOf(rectHeight));
//        rect1.setProperties(properties);
//        addShape(rect1);
//       rect1.draw(canvas1.getGraphics());
        
        
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void shapesBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapesBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_shapesBoxActionPerformed

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
//        // TODO add your handling code here: //problem in colorize
//      int input = JOptionPane.showInternalConfirmDialog(null, "Do you want to fill the shape?",
//          "Colorize", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
//      if(input == JOptionPane.YES_OPTION){
//          Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.BLACK);
//          String str = shapesBox.getItemAt(shapesBox.getSelectedIndex());
//          shapes.get(str).setFillColor(newColor);
//      }
//      else{
//        Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.BLACK);
//        String str = shapesBox.getItemAt(shapesBox.getSelectedIndex());
//        shapes.get(str).setColor(newColor);
//      }
//        refresh(canvas1.getGraphics());
        
    }//GEN-LAST:event_colorizeActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        // TODO add your handling code here:
//       Line line1 =new Line();
//       Line.counter++;
//       HashMap<String , Double> properties = new HashMap<>();
//       String lineXY = JOptionPane.showInputDialog("Enter position x1,y1:");
//       String[] values = lineXY.split(",");
//            int x1 = Integer.parseInt(values[0]);
//            int y1 = Integer.parseInt(values[1]);
//         lineXY =JOptionPane.showInputDialog("Enter position x2,y2 :");
//        values = lineXY.split(",");
//            int x2 = Integer.parseInt(values[0]);
//            int y2 = Integer.parseInt(values[1]);
//        Point p = new Point(x1, y1);
//        Point p2 = new Point(x2, y2);
//        line1.setPosition(p);
//        line1.setPosition2(p2);
//        properties.put("Length",Math.sqrt(Math.pow((y2-y1), 2)+Math.pow((x2-x1), 2)));
//        System.out.println(properties.get("Length"));
//        line1.setProperties(properties);
//        addShape(line1);
//       line1.draw(canvas1.getGraphics());
        
    }//GEN-LAST:event_lineButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        // TODO add your handling code here:
//      Circle circle1 = new Circle();
//      Circle.counter++;
//      HashMap<String , Double> properties = new HashMap<>();
//      String radius = JOptionPane.showInputDialog("Enter radius :");
//      String circleXY =JOptionPane.showInputDialog("Enter position (x,y) :");
//       String[] values = circleXY.split(",");
//            int x = Integer.parseInt(values[0]);
//            int y = Integer.parseInt(values[1]);
//        Point p = new Point(x, y);
//        circle1.setPosition(p);
//        properties.put("Radius", Double.valueOf(radius));
//        circle1.setProperties(properties);
//        addShape(circle1);
//       circle1.draw(canvas1.getGraphics());
        
       
    }//GEN-LAST:event_circleButtonActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
//        String str = shapesBox.getItemAt(shapesBox.getSelectedIndex());
//        removeShape(shapes.get(str));
//        refresh(canvas1.getGraphics());
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintProgram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Canvas canvas1;
    private javax.swing.JToggleButton circleButton;
    private javax.swing.JButton colorize;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton lineButton;
    private javax.swing.JToggleButton rectangleButton;
    private javax.swing.JComboBox<String> shapesBox;
    private javax.swing.JToggleButton squareButton;
    // End of variables declaration//GEN-END:variables
//
//    @Override
//    public void addShape(Shape shape) {
//        if (shape instanceof Line){
//            String key = "Line"+Line.counter;
//            shapes.put(key, shape);
//            shapesBox.addItem(key);
//    }
//        else if(shape instanceof Rectangle){
//            String key = "Rectangle"+Rectangle.counter;
//            shapes.put(key, shape);
//            shapesBox.addItem(key);
//        }
//         else if(shape instanceof Square){
//            String key = "Square"+Square.counter;
//            shapes.put(key, shape);
//            shapesBox.addItem(key);
//        }
//         else if(shape instanceof Circle){
//            String key = "Circle"+Circle.counter;
//            shapes.put(key, shape);
//            shapesBox.addItem(key);
//        }
//    }
//
//    @Override
//    public void removeShape(Shape shape) {
//        String key ="";
//         for (Map.Entry<String, Shape> entry : shapes.entrySet()) {
//           if(entry.getValue() == shape){
//                key = entry.getKey();
//           }
//            
//        }
//         shapes.remove(key); 
//         shapesBox.removeItem(key);
//       
//        
//    }
//   
//
//    @Override
//    public Shape[] getShapes() {
//        Shape[] arr = new Shape[shapes.size()];
//        arr = shapes.values().toArray(arr);
//        return  arr;
//    }
//    
//
//    @Override
//    public void refresh(Graphics canvas) {
//        printComponents(canvas);
//    }
//    @Override
//     public void printComponents(Graphics g){
//         //super.printComponents(g);
//         Shape[] arr = getShapes(); 
//    g.clearRect(0, 0, canvas1.getWidth(), canvas1.getHeight());
//         for (Shape shape : arr) {
//            Graphics2D g2 = (Graphics2D)g;
//            shape.draw(g2);
//        }
//     }
}
