/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package painting;



import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import shapes.Circle;
import shapes.Rectangle;
import shapes.Shape;
import shapes.Line;
import shapes.Triangle;



/**
 *
 * @author yasmi
 */
public class MiniPaint extends javax.swing.JFrame implements Node{
    public static int counter = 0;
    private NewCircle newCircle ;
    private NewSquare newSquare;
    private NewLine newLine;
    private NewRectangle newRectangle;
    private NewTriangle newTriangle;
    private int resize = 0;
    private boolean dragged;
    /**
     * Creates new form MiniPaint
     */
    public MiniPaint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        colorize = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        myPanel2 = new painting.MyPanel();
        shapesBox = new javax.swing.JComboBox();
        CircleBT = new javax.swing.JButton();
        RectBT = new javax.swing.JButton();
        LineBT = new javax.swing.JButton();
        SquareBT = new javax.swing.JButton();
        TriBT = new javax.swing.JButton();
        copy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveFile = new javax.swing.JMenuItem();
        loadFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        colorize.setText("Colorize");
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Select shape");

        myPanel2.setBackground(new java.awt.Color(255, 255, 255));
        myPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                myPanel2MouseDragged(evt);
            }
        });
        myPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                myPanel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                myPanel2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout myPanel2Layout = new javax.swing.GroupLayout(myPanel2);
        myPanel2.setLayout(myPanel2Layout);
        myPanel2Layout.setHorizontalGroup(
            myPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        myPanel2Layout.setVerticalGroup(
            myPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );

        shapesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapesBoxActionPerformed(evt);
            }
        });

        CircleBT.setText("Oval");
        CircleBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleBTActionPerformed(evt);
            }
        });

        RectBT.setText("Rectangle");
        RectBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectBTActionPerformed(evt);
            }
        });

        LineBT.setText("Line");
        LineBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineBTActionPerformed(evt);
            }
        });

        SquareBT.setText("Square");
        SquareBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareBTActionPerformed(evt);
            }
        });

        TriBT.setText("Triangle");
        TriBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriBTActionPerformed(evt);
            }
        });

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFile.setText("Save As");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        jMenu1.add(saveFile);

        loadFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadFile.setText("Load");
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });
        jMenu1.add(loadFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorize, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(shapesBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(myPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .addComponent(TriBT, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LineBT, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CircleBT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SquareBT, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RectBT, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CircleBT)
                    .addComponent(LineBT)
                    .addComponent(SquareBT)
                    .addComponent(RectBT)
                    .addComponent(TriBT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shapesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorize)
                            .addComponent(delete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copy))
                    .addComponent(myPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
        // TODO add your handling code here: //problem in colorize
          Shape s = (Shape)shapesBox.getSelectedItem();
          if( s != null){
          Color newColor = JColorChooser.showDialog(null, "Choose border color", Color.BLACK);
          s.setColor(newColor);
         newColor = JColorChooser.showDialog(null, "Choose fill color", Color.BLACK);
          s.setFillColor(newColor);
        myPanel2.refresh(myPanel2.getGraphics());
          }

    }//GEN-LAST:event_colorizeActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
       Shape s = (Shape)shapesBox.getSelectedItem();
       if( s != null){
        myPanel2.removeShape(s);
        myPanel2.setShape(null);
        shapesBox.removeItem(s);
       // myPanel2.refresh(myPanel2.getGraphics());
       }
       
      
    }//GEN-LAST:event_deleteActionPerformed

    private void CircleBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleBTActionPerformed
        // TODO add your handling code here:
      newCircle = new NewCircle(shapesBox,myPanel2);
      this.setVisible(false);
      newCircle.setParentNode(this);
      newCircle.setVisible(true);
    }//GEN-LAST:event_CircleBTActionPerformed

    private void RectBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectBTActionPerformed
        // TODO add your handling code here:
        
       newRectangle = new NewRectangle(shapesBox,myPanel2);
      this.setVisible(false);
      newRectangle.setParentNode(this);
      newRectangle.setVisible(true);
       
    }//GEN-LAST:event_RectBTActionPerformed

    private void LineBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineBTActionPerformed
        // TODO add your handling code here:
      
      newLine = new NewLine(shapesBox,myPanel2);
      this.setVisible(false);
      newLine.setParentNode(this);
      newLine.setVisible(true);
      
        //Double length =Math.sqrt(Math.pow((y2-y1), 2)+Math.pow((x2-x1), 2)) ;
        
    }//GEN-LAST:event_LineBTActionPerformed

    private void SquareBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareBTActionPerformed
        // TODO add your handling code here:
      newSquare = new NewSquare(shapesBox,myPanel2);
      this.setVisible(false);
      newSquare.setParentNode(this);
      newSquare.setVisible(true);
      
    }//GEN-LAST:event_SquareBTActionPerformed

    private void shapesBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapesBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shapesBoxActionPerformed

    private void TriBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriBTActionPerformed
        // TODO add your handling code here:
      newTriangle = new NewTriangle(shapesBox,myPanel2);
      this.setVisible(false);
      newTriangle.setParentNode(this);
      newTriangle.setVisible(true);
    }//GEN-LAST:event_TriBTActionPerformed

    private void myPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel2MousePressed
        // TODO add your handling code here:
        dragged = false;

        for(Shape shape : myPanel2.getShapes()){
            if(shape.contains(evt.getPoint())){
               //myPanel2.refresh(myPanel2.getGraphics()); //idk??
                for (Point point : shape.getPoints()){
                    myPanel2.getGraphics().fillRect(point.x - 5, point.y - 5, 10, 10);
                }
                shape.setDraggingPoint(evt.getPoint());
                shapesBox.setSelectedItem(shape);
                dragged = true;
                if(shape.resizeable(evt.getPoint()) > 0){
                    resize = shape.resizeable(evt.getPoint());
                }
                else{
                    resize = 0;
                }
                //break;
            }
        }
          
          
       
       
            
        
    }//GEN-LAST:event_myPanel2MousePressed

    private void myPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel2MouseDragged
        // TODO add your handling code here:
      if(dragged){
          Shape selectedShape = (Shape) shapesBox.getSelectedItem();
          if(resize > 0){
              selectedShape.resize(evt.getPoint(), resize);
          }
          else{
              selectedShape.moveTo(evt.getPoint());
          }
          myPanel2.refresh(myPanel2.getGraphics());
      }
        
            

        
        
    }//GEN-LAST:event_myPanel2MouseDragged

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        Shape shape = (Shape) shapesBox.getSelectedItem(); //MAKE COPY CONSTRUCTOR
        if(shape != null){
        Point point = new Point(shape.getPosition());
        if(shape instanceof Circle){
            Circle circle = (Circle) shape;
            Circle circleCopy = new Circle(++MiniPaint.counter,circle.getRadiusVertical(),circle.getRadiusHorizontal(),point);
            circleCopy.setColor(shape.getColor());
            circleCopy.setFillColor(shape.getFillColor());
            shapesBox.addItem(circleCopy);
            myPanel2.addShape(circleCopy);
            repaint();
        }
        else if(shape instanceof Rectangle){
            Rectangle rect = (Rectangle) shape;
            Rectangle rectCopy = new Rectangle(++MiniPaint.counter,rect.getWidth(),rect.getHeight(),point);
            rectCopy.setColor(shape.getColor());
            rectCopy.setFillColor(shape.getFillColor());
            shapesBox.addItem(rectCopy);
            myPanel2.addShape(rectCopy);
            repaint();
        }
          else if(shape instanceof Line){
            Line line = (Line) shape;
            Point point2 = new Point(line.getPoint2());
            Line lineCopy = new Line(++MiniPaint.counter,point,point2);
            lineCopy.setColor(shape.getColor());
            lineCopy.setFillColor(shape.getFillColor());
            shapesBox.addItem(lineCopy);
            myPanel2.addShape(lineCopy);
            repaint();
        }
         else if(shape instanceof Triangle){
            Triangle tri = (Triangle) shape;
            Point point2 = new Point(tri.getPoint2());
            Point point3 = new Point(tri.getPoint3());
            Triangle triCopy = new Triangle(++MiniPaint.counter,point,point2,point3);
            triCopy.setColor(shape.getColor());
            triCopy.setFillColor(shape.getFillColor());
            shapesBox.addItem(triCopy);
            myPanel2.addShape(triCopy);
            repaint();
        }
        
        }     
      
        
    }//GEN-LAST:event_copyActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("json files", "json");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(restrict);
        JSONObject jsonObject = new JSONObject();
        JSONArray jsonArray = new JSONArray();
       
        if(chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION){
            try {
                 Shape[] shapes = myPanel2.getShapes();
                 for (Shape shape: shapes){
                     jsonArray.add(shape.getShapeData());
                  }
                jsonObject.put("shapes", jsonArray);
                File f = chooser.getSelectedFile();
                FileWriter fileWriter = new FileWriter(f.getPath());
                fileWriter.write(jsonObject.toJSONString()); //toJSONString
                fileWriter.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "cannot save file");
            }
            
        }
       
    }//GEN-LAST:event_saveFileActionPerformed

    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("json files", "json");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(restrict);
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            File f = chooser.getSelectedFile();
            try {
                FileReader fileReader = new FileReader(f.getPath());
                JSONParser jsonParser = new JSONParser();
                JSONObject jsonObject = (JSONObject) jsonParser.parse(fileReader);
                JSONArray jsonArray = (JSONArray) jsonObject.get("shapes");
                myPanel2.clear();
                shapesBox.removeAllItems();
                counter = 0;
                for (int i = 0 ; i < jsonArray.size(); i++){
                    jsonObject = (JSONObject) jsonArray.get(i);
                    if(jsonObject.get("type").equals("oval")){
                        Circle circle = new Circle(jsonObject);
                        counter++;
                        myPanel2.addShape(circle);
                        shapesBox.addItem(circle);
                        myPanel2.refresh(myPanel2.getGraphics());
                    }
                    else if(jsonObject.get("type").equals("line")){
                        Line line = new Line(jsonObject);
                        counter++;
                        myPanel2.addShape(line);
                        shapesBox.addItem(line);
                        myPanel2.refresh(myPanel2.getGraphics());
                    }
                    else if(jsonObject.get("type").equals("rectangle")){
                        Rectangle rect = new Rectangle(jsonObject);
                        System.out.println(jsonObject);
                        counter++;
                        myPanel2.addShape(rect);
                        shapesBox.addItem(rect);
                        myPanel2.refresh(myPanel2.getGraphics());
                    }
                    else if(jsonObject.get("type").equals("triangle")){
                        Triangle tri = new Triangle(jsonObject);
                        counter++;
                        myPanel2.addShape(tri);
                        shapesBox.addItem(tri);
                        myPanel2.refresh(myPanel2.getGraphics());
                    }
                }
           
            } catch (Exception ex) {
                 JOptionPane.showMessageDialog(null, "cannot open file");
            }
            
            
        }
        
    }//GEN-LAST:event_loadFileActionPerformed

    private void myPanel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanel2MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_myPanel2MouseReleased
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniPaint().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CircleBT;
    private javax.swing.JButton LineBT;
    private javax.swing.JButton RectBT;
    private javax.swing.JButton SquareBT;
    private javax.swing.JButton TriBT;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton colorize;
    private javax.swing.JButton copy;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadFile;
    private painting.MyPanel myPanel2;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JComboBox shapesBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    

}
